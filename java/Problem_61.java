import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

public class Problem_61 {
	/* Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
	 * 
	 * Triangle P3,n=n(n+1)/2 1, 3, 6, 10, 15, ...
	 * Square P4,n=n2 1, 4, 9, 16, 25, ...
	 * Pentagonal P5,n=n(3n-1)/2 1, 5, 12, 22, 35, ...
	 * Hexagonal P6,n=n(2n-1) 1, 6, 15, 28, 45, ...
	 * Heptagonal P7,n=n(5n-3)/2 1, 7, 18, 34, 55, ...
	 * Octagonal P8,n=n(3n-2) 1, 8, 21, 40, 65, ...
	 * 
	 * The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
	 * 
	 * The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
	 * Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
	 * This is the only set of 4-digit numbers with this property.
	 * Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and
	 * octagonal, is represented by a different number in the set. */
	
	static ArrayList<Integer> num3 = new ArrayList<>();
	static ArrayList<Integer> num4 = new ArrayList<>();
	static ArrayList<Integer> num5 = new ArrayList<>();
	static ArrayList<Integer> num6 = new ArrayList<>();
	static ArrayList<Integer> num7 = new ArrayList<>();
	static ArrayList<Integer> num8 = new ArrayList<>();

	public static void main(String[] args) {
		long answer = 0;
		for (int i = 3; i <= 8; i++) {
			for (int j = 0;; j++) {
				if (i == 3) {
					int num = (int) Funcs.getNShapeNum(j, i);
					if (String.valueOf(num).length() > 4) break;
					if (String.valueOf(num).length() == 4) num3.add(num);
				}
				if (i == 4) {
					int num = (int) Funcs.getNShapeNum(j, i);
					if (String.valueOf(num).length() > 4) break;
					if (String.valueOf(num).length() == 4) num4.add(num);
				}
				if (i == 5) {
					int num = (int) Funcs.getNShapeNum(j, i);
					if (String.valueOf(num).length() > 4) break;
					if (String.valueOf(num).length() == 4) num5.add(num);
				}
				if (i == 6) {
					int num = (int) Funcs.getNShapeNum(j, i);
					if (String.valueOf(num).length() > 4) break;
					if (String.valueOf(num).length() == 4) num6.add(num);
				}
				if (i == 7) {
					int num = (int) Funcs.getNShapeNum(j, i);
					if (String.valueOf(num).length() > 4) break;
					if (String.valueOf(num).length() == 4) num7.add(num);
				}
				if (i == 8) {
					int num = (int) Funcs.getNShapeNum(j, i);
					if (String.valueOf(num).length() > 4) break;
					if (String.valueOf(num).length() == 4) num8.add(num);
				}
			}
		}
		ArrayList<ArrayList<Integer>> nums = new ArrayList<ArrayList<Integer>>();
		nums.add(num3);
		nums.add(num4);
		nums.add(num5);
		nums.add(num6);
		nums.add(num7);
		nums.add(num8);
		Map<Integer, Integer> chain = new HashMap<Integer, Integer>();
		first:
		for (int i = 0; i < nums.get(0).size(); i++) {
			int num1 = nums.get(0).get(i);
			chain.put(3, num1);
			Map<Integer, ArrayList<Integer>> cyclicOne = getCyclics(num1, chain, nums);
			for (Entry<Integer, ArrayList<Integer>> entry : cyclicOne.entrySet()) {
				for (int j = 0; j < entry.getValue().size(); j++) {
					int num2 = entry.getValue().get(j);
					chain.put(entry.getKey(), num2);
					Map<Integer, ArrayList<Integer>> cyclicTwo = getCyclics(num2, chain, nums);
					for (Entry<Integer, ArrayList<Integer>> entry1 : cyclicTwo.entrySet()) {
						for (int k = 0; k < entry1.getValue().size(); k++) {
							int num3 = entry1.getValue().get(k);
							chain.put(entry1.getKey(), num3);
							Map<Integer, ArrayList<Integer>> cyclicThree = getCyclics(num3, chain, nums);
							for (Entry<Integer, ArrayList<Integer>> entry2 : cyclicThree.entrySet()) {
								for (int l = 0; l < entry2.getValue().size(); l++) {
									int num4 = entry2.getValue().get(l);
									chain.put(entry2.getKey(), num4);
									Map<Integer, ArrayList<Integer>> cyclicFour = getCyclics(num4, chain, nums);
									for (Entry<Integer, ArrayList<Integer>> entry3 : cyclicFour.entrySet()) {
										for (int m = 0; m < entry3.getValue().size(); m++) {
											int num5 = entry3.getValue().get(m);
											chain.put(entry3.getKey(), num5);
											Map<Integer, ArrayList<Integer>> cyclicFive = getCyclics(num5, chain, nums);
											for (Entry<Integer, ArrayList<Integer>> entry4 : cyclicFive.entrySet()) {
												for (int n = 0; n < entry4.getValue().size(); n++) {
													int num6 = entry4.getValue().get(n);
													chain.put(entry4.getKey(), num6);
													if (isCyclic(num6, num1)) break first;
													chain.remove(entry4.getKey());
												}
											}
											chain.remove(entry3.getKey());
										}
									}
									chain.remove(entry2.getKey());
								}
							}
							chain.remove(entry1.getKey());
						}
					}
					chain.remove(entry.getKey());
				}
			}
			chain.remove(3);
		}
		for (Entry<Integer, Integer> entry : chain.entrySet())
			answer += entry.getValue();
		System.out.println(answer);
	}
	
	public static Map<Integer, ArrayList<Integer>> getCyclics(int num1, Map<Integer, Integer> chain, ArrayList<ArrayList<Integer>> nums) {
		Map<Integer, ArrayList<Integer>> cyclicNum = new HashMap<Integer, ArrayList<Integer>>();
		for (int j = 1; j < nums.size(); j++) {
			if (chain.containsKey(j + 3)) continue;
			ArrayList<Integer> cyclics = new ArrayList<Integer>();
			for (int k = 0; k < nums.get(j).size(); k++) {
				int num2 = nums.get(j).get(k);
				if (!isCyclic(num1, num2)) continue;
				cyclics.add(num2);
			}
			if (cyclics.size() != 0) cyclicNum.put(j + 3, cyclics);
		}
		return cyclicNum;
	}

	public static boolean isCyclic(int num1, int num2) {
		return (String.valueOf(num1).substring(2).equals(String.valueOf(num2).substring(0, 2)) && num1 != num2);
	}
}
// 28684

